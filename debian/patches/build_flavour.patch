--- a/setup_build.py
+++ b/setup_build.py
@@ -18,6 +18,8 @@
 import api_gen
 from setup_configure import BuildConfig
 
+# set flavour  to 'pre_h5py_suf' to enable alternative builds e.g. _debian_h5py_mpi
+flavour=''
 
 def localpath(*args):
     return op.abspath(op.join(op.dirname(__file__), *args))
@@ -116,9 +118,13 @@
             #settings['runtime_library_dirs'] = settings['library_dirs']
 
         def make_extension(module):
-            sources = [localpath('h5py', module + '.pyx')] + EXTRA_SRC.get(module, [])
+            sources = [localpath('h5py', flavour, module+'.pyx')] + EXTRA_SRC.get(module, [])
             settings['libraries'] += EXTRA_LIBRARIES.get(module, [])
-            return Extension('h5py.' + module, sources, **settings)
+            if flavour:
+                h5py_module='h5py'+'.'+flavour+'.'+module
+            else:
+                h5py_module='h5py'+'.'+module
+            return Extension(h5py_module, sources, **settings)
 
         return [make_extension(m) for m in MODULES]
 
@@ -149,14 +155,14 @@
                 f"{config.hdf5_version} from environment variable or library)"
             )
 
-        defs_file = localpath('h5py', 'defs.pyx')
-        func_file = localpath('h5py', 'api_functions.txt')
-        config_file = localpath('h5py', 'config.pxi')
+        defs_file = localpath('h5py', flavour, 'defs.pyx')
+        func_file = localpath('h5py', flavour, 'api_functions.txt')
+        config_file = localpath('h5py', flavour, 'config.pxi')
 
         # Rebuild low-level defs if missing or stale
         if not op.isfile(defs_file) or os.stat(func_file).st_mtime > os.stat(defs_file).st_mtime:
             print("Executing api_gen rebuild of defs")
-            api_gen.run()
+            api_gen.run(flavour=flavour)
 
         # Rewrite config.pxi file if needed
         s = f"""\
--- a/api_gen.py
+++ b/api_gen.py
@@ -170,15 +170,15 @@
 
 class LineProcessor:
 
-    def run(self):
+    def run(self, flavour=''):
 
         # Function definitions file
-        self.functions = open(op.join('h5py', 'api_functions.txt'), 'r')
+        self.functions = open(op.join('h5py', flavour, 'api_functions.txt'), 'r')
 
         # Create output files
-        self.raw_defs = open(op.join('h5py', '_hdf5.pxd'), 'w')
-        self.cython_defs = open(op.join('h5py', 'defs.pxd'), 'w')
-        self.cython_imp = open(op.join('h5py', 'defs.pyx'), 'w')
+        self.raw_defs = open(op.join('h5py', flavour, '_hdf5.pxd'), 'w')
+        self.cython_defs = open(op.join('h5py', flavour, 'defs.pxd'), 'w')
+        self.cython_imp = open(op.join('h5py', flavour, 'defs.pyx'), 'w')
 
         self.raw_defs.write(raw_preamble)
         self.cython_defs.write(def_preamble)
@@ -303,9 +303,9 @@
         self.cython_imp.write(imp)
 
 
-def run():
+def run(flavour=''):
     lp = LineProcessor()
-    lp.run()
+    lp.run(flavour=flavour)
 
 
 if __name__ == '__main__':
